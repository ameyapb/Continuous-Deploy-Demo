Language and Framework:

Language: Python
Framework: Django
Application Overview:

The E-commerce Product Catalog application allows users to view a list of products, search for products, and add them to a shopping cart.
It includes basic functionalities such as product listing, product details, search functionality, and cart management.
Implementation Steps:

Step 1: Set up the Django Project:
Install Django using pip: pip install django
Create a new Django project: django-admin startproject ecommerce
Create a new Django app within the project: python manage.py startapp catalog

On EC2: 
Basic ->
sudo yum update
sudo yum install python3
python3 --version
sudo yum install python3-pip

Create a Virtual Environment -> 
python3 -m venv myenv
source myenv/bin/activate

Install & Setup Django:
pip install django
django-admin startproject ecommerce
cd ecommerce
python manage.py startapp catalog

Step 2: Define Models:
Open the catalog/models.py file and define the necessary models, such as Product, Category, and Cart.
Define the fields and relationships between the models, such as product name, description, price, category, etc.
Run migrations to create the database tables: python manage.py makemigrations followed by python manage.py migrate

[
Open the catalog/models.py file:

In the Django project, navigate to the catalog app directory and open the models.py file using a text editor or an integrated development environment (IDE).

Define the necessary models:
In the models.py file, define the models required for your E-commerce Product Catalog application, such as Product, Category, and Cart.
Each model will represent a table in the database and its fields will correspond to the columns.

Define the fields and relationships between the models:
For example, you can define the Product model with fields like name, description, price, and category.
Use Django's built-in field types to specify the data type and constraints for each field. For instance, you can use CharField, TextField, or DecimalField for different types of data.
Establish relationships between the models, such as a foreign key relationship between Product and Category models, by using Django's relationship fields like ForeignKey or ManyToManyField.

Run migrations to create the database tables:
In the terminal or command prompt, make sure you are in the root directory of your Django project (ecommerce in this case).

Run the following command to generate the necessary database migration files:
python manage.py makemigrations

This command analyzes the changes made to the models and generates the migration files required to create or modify the corresponding database tables.

After generating the migration files, run the following command to apply the migrations and create the database tables:
python manage.py migrate
This command executes the generated migration files and creates the necessary database tables based on your model definition
]

Step 3: Create Views and Templates:
Create views in the catalog/views.py file to handle the different functionalities, such as listing products, displaying product details, and managing the cart.
Create corresponding HTML templates in the catalog/templates directory to define the visual representation of each view.

Step 4: Define URLs and Routing:
Configure URL patterns in the ecommerce/urls.py file to map URLs to the appropriate views.
Define routes for product listing, product details, search, and cart management.

Step 5: Implement Functionality:
In the views, implement logic to fetch products from the database and render them in the templates.
Implement search functionality to filter products based on user input.
Add functionality to manage the cart, such as adding products to the cart and displaying the cart contents.

Step 6: Run the Application:
Start the development server: python manage.py runserver
Open a web browser and access the application at http://localhost:8000

=============================================================================================================================================================
Step 1: Set up the Django Project
First, make sure you have Python installed on your system. Then, open a terminal and follow these commands:
```shell
# Install Django using pip
pip install django
# Create a new Django project
django-admin startproject ecommerce
# Create a new Django app within the project
cd ecommerce
python manage.py startapp catalog
```

Step 2: Define Models
Open the `catalog/models.py` file and define the necessary models. Here’s an example implementation:
```python
from django.db import models
class Category(models.Model):
    name = models.CharField(max_length=100)
    def __str__(self):
        return self.name
class Product(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    def __str__(self):
        return self.name
class Cart(models.Model):
    products = models.ManyToManyField(Product, through=‘CartItem’)
    def __str__(self):
        return f”Cart {self.pk}”
class CartItem(models.Model):
    product = models.ForeignKey(Product, on_delete=models.CASCADE)
    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    def __str__(self):
        return f”CartItem {self.pk}”
```

Run migrations to create the database tables:
```shell
python manage.py makemigrations
python manage.py migrate
```

Step 3: Create Views and Templates
Create views in the `catalog/views.py` file to handle the different functionalities. Here’s an example implementation:
```python
from django.shortcuts import render
from .models import Product
def product_list(request):
    products = Product.objects.all()
    return render(request, ‘catalog/product_list.html’, {‘products’: products})
def product_detail(request, product_id):
    product = Product.objects.get(id=product_id)
    return render(request, ‘catalog/product_detail.html’, {‘product’: product})
def cart(request):
    cart = Cart.objects.first()  # Assuming only one cart exists
    return render(request, ‘catalog/cart.html’, {‘cart’: cart})
```

Create corresponding HTML templates in the `catalog/templates` directory. Here’s an example implementation for the templates mentioned in the views:
`catalog/product_list.html`:
```html
{% for product in products %}
  <div>
    <h2>{{ product.name }}</h2>
    <p>{{ product.description }}</p>
    <p>Price: {{ product.price }}</p>
    <a href=“{% url ‘product_detail’ product.id %}“>View Details</a>
  </div>
{% endfor %}
```
`catalog/product_detail.html`:
```html
<h2>{{ product.name }}</h2>
<p>{{ product.description }}</p>
<p>Price: {{ product.price }}</p>
<a href=“{% url ‘cart’ %}“>Add to Cart</a>
```
`catalog/cart.html`:
```html
<h2>Cart</h2>
{% for item in cart.cartitem_set.all %}
  <p>{{ item.product.name }} - Quantity: {{ item.quantity }}</p>
{% empty %}
  <p>Your cart is empty.</p>
{% endfor %}
```
Step 4: Define URLs and Routing
Configure URL patterns in the `ecommerce/urls.py` file to map URLs to the appropriate views. Here’s an example implementation:
```python
from django.urls import path
from
 catalog import views
urlpatterns = [
    path(‘products/’, views.product_list, name=‘product_list’),
    path(‘products/<int:product_id>/’, views.product_detail, name=‘product_detail’),
    path(‘cart/’, views.cart, name=‘cart’),
]
```

Step 5: Implement Functionality
In the views, implement logic to fetch products from the database and render them in the templates. Here’s an example implementation of the `product_list` view:
```python
from django.shortcuts import render
from .models import Product
def product_list(request):
    products = Product.objects.all()
    return render(request, ‘catalog/product_list.html’, {‘products’: products})
```
You can similarly implement the remaining views (`product_detail` and `cart`) and their associated functionality.

Step 6: Run the Application
Start the development server:
```shell
python manage.py runserver
```
Open a web browser and access the application at http://localhost:8000/products/.
That’s it! You’ve created a basic e-commerce product catalog web application using Django. Remember to continue building upon these steps to add more functionality and enhance the application further.
